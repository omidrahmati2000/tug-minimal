name: üöÄ Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'ghcr.io' }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME || github.actor }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD || secrets.GITHUB_TOKEN }}

jobs:
  create-release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    
    outputs:
      release-tag: ${{ steps.tag.outputs.tag }}
      
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üè∑Ô∏è Get release tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: üìù Generate changelog
      id: changelog
      run: |
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: üöÄ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: |
          ## What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          - `${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ steps.tag.outputs.tag }}`
          - `${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest`
        draft: false
        prerelease: ${{ inputs.pre_release || false }}

  build-release:
    name: üèóÔ∏è Build Release Images
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
        
    - name: üèóÔ∏è Build and push multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ needs.create-release.outputs.release-tag }}
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
        build-args: |
          NODE_ENV=production
          API_URL=${{ secrets.PRODUCTION_API_URL }}
          DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}

  deploy-release:
    name: üöÄ Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}
      
    steps:
    - name: üöÄ Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd ${{ secrets.PRODUCTION_PATH }}
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ needs.create-release.outputs.release-tag }}
          
          # Backup current deployment
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:backup-$(date +%Y%m%d%H%M%S) || true
          
          # Deploy new version
          export IMAGE_TAG=${{ needs.create-release.outputs.release-tag }}
          docker-compose down
          docker-compose up -d
          
          # Health check
          timeout 300 bash -c 'until curl -f ${{ secrets.PRODUCTION_URL }}/health; do sleep 5; done'
          
    - name: üì¢ Notify successful deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ‚úÖ Production release deployed successfully!
          Version: ${{ needs.create-release.outputs.release-tag }}
          URL: ${{ secrets.PRODUCTION_URL }}
          
    - name: üì¢ Notify failed deployment
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ‚ùå Production release deployment failed!
          Version: ${{ needs.create-release.outputs.release-tag }}
          Please check the logs and consider rollback.